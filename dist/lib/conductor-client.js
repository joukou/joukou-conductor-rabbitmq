var ConductorRabbitMQClient, JoukouConductorExchange, JoukouConductorRoutingKey, JoukouFleetAPIHost, JoukouFleetAPIPath, RabbitMQClient, fleet, httpClient, noflo, request,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

JoukouConductorExchange = process.env["JOUKOU_CONDUCTOR_EXCHANGE"];

JoukouConductorRoutingKey = process.env["JOUKOU_CONDUCTOR_ROUTING_KEY"];

JoukouFleetAPIHost = process.env["JOUKOU_FLEET_API_HOST"];

JoukouFleetAPIPath = process.env["JOUKOU_FLEET_API_PATH"];

RabbitMQClient = require('./client');

request = require('request');

fleet = require('joukou-conductor-fleet');

noflo = require('joukou-conductor-noflo').SystemD;

httpClient = require('./http-client');

if (!JoukouConductorExchange) {
  JoukouConductorExchange = "amqp://localhost";
  process.env["JOUKOU_CONDUCTOR_EXCHANGE"] = JoukouConductorExchange;
}

if (!JoukouConductorRoutingKey) {
  JoukouConductorRoutingKey = "CONDUCTOR";
  process.env["JOUKOU_CONDUCTOR_ROUTING_KEY"] = JoukouConductorRoutingKey;
}

if (!JoukouFleetAPIHost) {
  JoukouFleetAPIHost = "localhost:4002";
  process.env["JOUKOU_FLEET_API_HOST"] = JoukouFleetAPIHost;
}

if (!JoukouFleetAPIPath) {
  JoukouFleetAPIPath = "/v1/";
  process.env["JOUKOU_FLEET_API_PATH"] = JoukouFleetAPIPath;
}

ConductorRabbitMQClient = (function(_super) {
  __extends(ConductorRabbitMQClient, _super);

  ConductorRabbitMQClient.prototype.fleetClient = null;

  function ConductorRabbitMQClient() {
    var client;
    ConductorRabbitMQClient.__super__.constructor.call(this, JoukouConductorExchange, JoukouConductorRoutingKey);
    client = this;
    this.consume(function(err, message) {
      if (err) {
        throw err;
      }
      return client.onMessage.apply(client, [message]);
    }, true);
    this.fleetClient = fleet.getClient(JoukouFleetAPIHost, JoukouFleetAPIPath, true);
  }

  ConductorRabbitMQClient.prototype.onMessage = function(message) {
    if (!(message instanceof Object)) {
      return;
    }
    if (!(message["_links"] instanceof Object)) {
      return;
    }
    if (!(message["_links"]["joukou:graph"] instanceof Object)) {
      return;
    }
    if (!message["_links"]["joukou:graph"]["href"]) {
      return;
    }
    if (!message.desiredState) {
      return;
    }
    return this.onGraphHref(message["_links"]["joukou:graph"]["href"], message.desiredState, message.secret, message.exchange);
  };

  ConductorRabbitMQClient.prototype.onGraphHref = function(graphHref, desiredState, secret, exchange) {
    var client, createExchangePromise, graph, graphDeferred, options;
    options = null;
    if (secret) {
      options = {
        auth: {
          bearer: secret
        }
      };
    }
    client = this;
    graphDeferred = Q.defer();
    graph = null;
    request.get(graphHref, options, function(error, response, body, desiredState) {
      return graph = client.onGraphResponse.apply(client, [error, response, body, desiredState, graphDeferred]);
    });
    createExchangePromise = httpClient.createExchange(exchange, null, 'direct', true, true);
    return Q.all([graphDeferred.promise, createExchangePromise]).then(function() {
      return createUnit(graph, exchange);
    });
  };

  ConductorRabbitMQClient.prototype.createUnit = function(body, exchange) {

    /*
      unitName: "name"
      options: [SystemDUnitFile].options
      machineID: machineID
     */
    var client;
    noflo.createFromSchema(body, null, "TODO", "TODO", exchange);
    client = this.fleetClient;
    return client.createUnit(options.unitName, options.options, null, options.machineID);
  };

  ConductorRabbitMQClient.prototype.onGraphResponse = function(error, response, body, graphDeferred) {
    var jsonBody;
    if (error || response.statusCode !== 200) {
      graphDeferred.reject();
      return;
    }
    jsonBody = null;
    try {
      jsonBody = JSON.parse(body);
    } catch (_error) {}
    if (!jsonBody) {
      graphDeferred.reject();
      return;
    }
    try {
      graphDeferred.resolve();
      return jsonBody;
    } catch (_error) {
      return graphDeferred.reject();
    }
  };

  return ConductorRabbitMQClient;

})(RabbitMQClient);

module.exports = {
  listen: function() {
    return new ConductorRabbitMQClient();
  },
  ConductorRabbitMQClient: ConductorRabbitMQClient
};

//# sourceMappingURL=data:application/json;base64,