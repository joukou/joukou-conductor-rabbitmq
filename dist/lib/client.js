var Q, RabbitMQClient, amqplib, uuid;

amqplib = require('amqplib');

Q = require('q');

uuid = require('node-uuid');

RabbitMQClient = (function() {
  RabbitMQClient.prototype._channelDeferred = null;

  RabbitMQClient.prototype.connection = null;

  RabbitMQClient.prototype.channel = null;

  RabbitMQClient.prototype.key = null;

  RabbitMQClient.prototype.exchange = null;

  RabbitMQClient.prototype.consumer = null;

  RabbitMQClient.prototype.on = {
    connection: null,
    channel: null
  };

  function RabbitMQClient(exchange, key) {
    this.exchange = exchange;
    this.key = key;
    this._channelDeferred = Q.defer();
    this.on = {
      connection: amqplib.connect(exchange),
      channel: this._channelDeferred.promise
    };
    this._setupConnection();
  }

  RabbitMQClient.prototype._setupConnection = function() {
    var client;
    client = this;
    return this.on.connection.then(function() {
      return client._onConnection.apply(client, arguments);
    });
  };

  RabbitMQClient.prototype._onConnection = function(connection) {
    this.connection = connection;
    return this._setupChannel();
  };

  RabbitMQClient.prototype._setupChannel = function() {
    var client, ok;
    client = this;
    ok = this.connection.createChannel();
    return ok.then(function() {
      return client._onChannel.apply(client, arguments);
    });
  };

  RabbitMQClient.prototype._onChannel = function(channel) {
    this.channel = channel;
    return this._channelDeferred.resolve(this);
  };

  RabbitMQClient.prototype.cancel = function(consumerTag) {
    if (!this.channel) {
      return Q.reject(new Error("Not connected"));
    }
    return this.channel.cancel(consumerTag);
  };

  RabbitMQClient.prototype.consume = function(callback, contentOnly, consumerTag) {
    var client;
    if (!(callback instanceof Function)) {
      throw new TypeError("Callback is expected to be a Function");
    }
    if (!consumerTag) {
      consumerTag = uuid.v4();
    }
    client = this;
    this.on.channel.then(function() {
      client.channel.assertQueue(client.key);
      return client.channel.consume(client.key, function(message) {
        if (message === null || message === void 0) {
          return;
        }
        if (contentOnly) {
          message = message.content;
        }
        if (message === null || message === void 0) {
          return;
        }
        return callback(message);
      }, {
        consumerTag: consumerTag
      });
    });
    return consumerTag;
  };

  RabbitMQClient.prototype.send = function(message) {
    var client;
    if (!(message instanceof Buffer)) {
      message = new Buffer(message);
    }
    client = this;
    return this.on.channel.then(function() {
      client.channel.assertQueue(client.key);
      return client.channel.sendToQueue(client.key, message);
    });
  };

  return RabbitMQClient;

})();

module.exports = {
  getClient: function(exchange, key) {
    return new RabbitMQClient(exchange, key);
  },
  RabbitMQClient: RabbitMQClient
};

//# sourceMappingURL=data:application/json;base64,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LFFBQUEsTUFBQTtBQUFBLElBQUEsSUFBRyxDQUFBLENBQUEsT0FBQSxZQUF1QixNQUF2QixDQUFIO0FBQ0UsTUFBQSxPQUFBLEdBQWMsSUFBQSxNQUFBLENBQU8sT0FBUCxDQUFkLENBREY7S0FBQTtBQUFBLElBRUEsTUFBQSxHQUFTLElBRlQsQ0FBQTtXQUdBLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQWhCLENBQXNCLFNBQUEsR0FBQTtBQUNwQixNQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBZixDQUEyQixNQUFNLENBQUMsR0FBbEMsQ0FBQSxDQUFBO2FBQ0EsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFmLENBQTJCLE1BQU0sQ0FBQyxHQUFsQyxFQUF1QyxPQUF2QyxFQUZvQjtJQUFBLENBQXRCLEVBSkk7RUFBQSxDQTdETixDQUFBOzt3QkFBQTs7SUFMRixDQUFBOztBQUFBLE1BMEVNLENBQUMsT0FBUCxHQUNFO0FBQUEsRUFBQSxTQUFBLEVBQVcsU0FBQyxRQUFELEVBQVcsR0FBWCxHQUFBO0FBQ1QsV0FBVyxJQUFBLGNBQUEsQ0FBZSxRQUFmLEVBQXlCLEdBQXpCLENBQVgsQ0FEUztFQUFBLENBQVg7QUFBQSxFQUVBLGNBQUEsRUFBZ0IsY0FGaEI7Q0EzRUYsQ0FBQSIsImZpbGUiOiJsaWIvY2xpZW50LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiYW1xcGxpYiA9IHJlcXVpcmUoJ2FtcXBsaWInKVxuUSAgICAgICA9IHJlcXVpcmUoJ3EnKVxudXVpZCAgICA9IHJlcXVpcmUoJ25vZGUtdXVpZCcpXG5cbmNsYXNzIFJhYmJpdE1RQ2xpZW50XG4gIF9jaGFubmVsRGVmZXJyZWQ6IG51bGxcbiAgY29ubmVjdGlvbjogbnVsbFxuICBjaGFubmVsOiBudWxsXG4gIGtleTogbnVsbFxuICBleGNoYW5nZTogbnVsbFxuICBjb25zdW1lcjogbnVsbFxuICBvbjpcbiAgICBjb25uZWN0aW9uOiBudWxsXG4gICAgY2hhbm5lbDogbnVsbFxuICBjb25zdHJ1Y3RvcjogKGV4Y2hhbmdlLCBrZXkpIC0+XG4gICAgdGhpcy5leGNoYW5nZSA9IGV4Y2hhbmdlXG4gICAgdGhpcy5rZXkgPSBrZXlcbiAgICB0aGlzLl9jaGFubmVsRGVmZXJyZWQgPSBRLmRlZmVyKClcbiAgICB0aGlzLm9uID1cbiAgICAgIGNvbm5lY3Rpb246IGFtcXBsaWIuY29ubmVjdChleGNoYW5nZSlcbiAgICAgIGNoYW5uZWw6IHRoaXMuX2NoYW5uZWxEZWZlcnJlZC5wcm9taXNlXG4gICAgdGhpcy5fc2V0dXBDb25uZWN0aW9uKClcbiAgX3NldHVwQ29ubmVjdGlvbjogLT5cbiAgICBjbGllbnQgPSB0aGlzXG4gICAgdGhpcy5vbi5jb25uZWN0aW9uLnRoZW4oIC0+XG4gICAgICBjbGllbnQuX29uQ29ubmVjdGlvbi5hcHBseShjbGllbnQsIGFyZ3VtZW50cylcbiAgICApXG4gIF9vbkNvbm5lY3Rpb246IChjb25uZWN0aW9uKSAtPlxuICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb25cbiAgICB0aGlzLl9zZXR1cENoYW5uZWwoKVxuICBfc2V0dXBDaGFubmVsOiAtPlxuICAgIGNsaWVudCA9IHRoaXNcbiAgICBvayA9IHRoaXMuY29ubmVjdGlvbi5jcmVhdGVDaGFubmVsKClcbiAgICBvay50aGVuKCAtPlxuICAgICAgY2xpZW50Ll9vbkNoYW5uZWwuYXBwbHkoY2xpZW50LCBhcmd1bWVudHMpXG4gICAgKVxuICBfb25DaGFubmVsOiAoY2hhbm5lbCkgLT5cbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsXG4gICAgdGhpcy5fY2hhbm5lbERlZmVycmVkLnJlc29sdmUodGhpcylcbiAgY2FuY2VsOiAoY29uc3VtZXJUYWcpIC0+XG4gICAgIyBOb3QgY29ubmVjdGVkXG4gICAgaWYgbm90IHRoaXMuY2hhbm5lbFxuICAgICAgcmV0dXJuIFEucmVqZWN0KG5ldyBFcnJvcihcIk5vdCBjb25uZWN0ZWRcIikpXG4gICAgdGhpcy5jaGFubmVsLmNhbmNlbChjb25zdW1lclRhZylcbiAgY29uc3VtZTogKGNhbGxiYWNrLCBjb250ZW50T25seSwgY29uc3VtZXJUYWcpIC0+XG4gICAgaWYgY2FsbGJhY2sgbm90IGluc3RhbmNlb2YgRnVuY3Rpb25cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYWxsYmFjayBpcyBleHBlY3RlZCB0byBiZSBhIEZ1bmN0aW9uXCIpXG4gICAgaWYgbm90IGNvbnN1bWVyVGFnXG4gICAgICAjIENyZWF0ZSBvbmUgc28gdGhleSBjYW4gY2FuY2VsIGl0XG4gICAgICBjb25zdW1lclRhZyA9IHV1aWQudjQoKVxuICAgIGNsaWVudCA9IHRoaXNcbiAgICB0aGlzLm9uLmNoYW5uZWwudGhlbigtPlxuICAgICAgY2xpZW50LmNoYW5uZWwuYXNzZXJ0UXVldWUoY2xpZW50LmtleSlcbiAgICAgIGNsaWVudC5jaGFubmVsLmNvbnN1bWUoY2xpZW50LmtleSwgKG1lc3NhZ2UpIC0+XG4gICAgICAgICMgRmlsdGVyIHRoZSBkdWRzIGhlcmVcbiAgICAgICAgaWYgbWVzc2FnZSBpcyBudWxsIG9yIG1lc3NhZ2UgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIGlmIGNvbnRlbnRPbmx5XG4gICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UuY29udGVudFxuICAgICAgICAjIENoZWNrIGFnYWluXG4gICAgICAgIGlmIG1lc3NhZ2UgaXMgbnVsbCBvciBtZXNzYWdlIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIHJldHVyblxuICAgICAgICBjYWxsYmFjayhtZXNzYWdlKVxuICAgICAgLCBjb25zdW1lclRhZzogY29uc3VtZXJUYWcpXG4gICAgKVxuICAgIGNvbnN1bWVyVGFnXG4gIHNlbmQ6IChtZXNzYWdlKSAtPlxuICAgIGlmIG1lc3NhZ2Ugbm90IGluc3RhbmNlb2YgQnVmZmVyXG4gICAgICBtZXNzYWdlID0gbmV3IEJ1ZmZlcihtZXNzYWdlKVxuICAgIGNsaWVudCA9IHRoaXNcbiAgICB0aGlzLm9uLmNoYW5uZWwudGhlbiggLT5cbiAgICAgIGNsaWVudC5jaGFubmVsLmFzc2VydFF1ZXVlKGNsaWVudC5rZXkpXG4gICAgICBjbGllbnQuY2hhbm5lbC5zZW5kVG9RdWV1ZShjbGllbnQua2V5LCBtZXNzYWdlKVxuICAgIClcbm1vZHVsZS5leHBvcnRzID1cbiAgZ2V0Q2xpZW50OiAoZXhjaGFuZ2UsIGtleSkgLT5cbiAgICByZXR1cm4gbmV3IFJhYmJpdE1RQ2xpZW50KGV4Y2hhbmdlLCBrZXkpXG4gIFJhYmJpdE1RQ2xpZW50OiBSYWJiaXRNUUNsaWVudCJdfQ==