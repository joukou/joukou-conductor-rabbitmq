var Q, RabbitMQClient, amqplib, uuid;

amqplib = require('amqplib');

Q = require('q');

uuid = require('node-uuid');

RabbitMQClient = (function() {
  RabbitMQClient.prototype._channelDeferred = null;

  RabbitMQClient.prototype.connection = null;

  RabbitMQClient.prototype.channel = null;

  RabbitMQClient.prototype.key = null;

  RabbitMQClient.prototype.exchange = null;

  RabbitMQClient.prototype.consumer = null;

  RabbitMQClient.prototype.on = {
    connection: null,
    channel: null
  };

  function RabbitMQClient(exchange, key) {
    this.exchange = exchange;
    this.key = key;
    this._channelDeferred = Q.defer();
    this.on = {
      connection: amqplib.connect(exchange),
      channel: this._channelDeferred.promise
    };
    this._setupConnection();
  }

  RabbitMQClient.prototype._setupConnection = function() {
    var client;
    client = this;
    return this.on.connection.then(function() {
      return client._onConnection.apply(client, arguments);
    }).fail(function(err) {
      this._channelDeferred.reject(err);
    });
  };

  RabbitMQClient.prototype._onConnection = function(connection) {
    this.connection = connection;
    return this._setupChannel();
  };

  RabbitMQClient.prototype._setupChannel = function() {
    var client, ok;
    client = this;
    ok = this.connection.createChannel();
    return ok.then(function() {
      client._onChannel.apply(client, arguments);
    }).fail(function(err) {
      this._channelDeferred.reject(err);
    });
  };

  RabbitMQClient.prototype._onChannel = function(channel) {
    this.channel = channel;
    return this._channelDeferred.resolve(this);
  };

  RabbitMQClient.prototype.cancel = function(consumerTag) {
    if (!this.channel) {
      return Q.reject(new Error("Not connected"));
    }
    return this.channel.cancel(consumerTag);
  };

  RabbitMQClient.prototype.consume = function(callback, contentOnly, consumerTag) {
    var client;
    if (!(callback instanceof Function)) {
      throw new TypeError("Callback is expected to be a Function");
    }
    if (!consumerTag) {
      consumerTag = uuid.v4();
    }
    client = this;
    this.on.channel.then(function() {
      client.channel.assertQueue(client.key);
      return client.channel.consume(client.key, function(message) {
        if (message === null || message === void 0) {
          return;
        }
        if (contentOnly) {
          message = message.content;
        }
        if (message === null || message === void 0) {
          return;
        }
        return callback(null, message);
      }, {
        consumerTag: consumerTag
      });
    }).fail(function(err) {
      callback(err, null);
    });
    return consumerTag;
  };

  RabbitMQClient.prototype.send = function(message) {
    var client;
    if (!(message instanceof Buffer)) {
      message = new Buffer(message);
    }
    client = this;
    return this.on.channel.then(function() {
      client.channel.assertQueue(client.key);
      return client.channel.sendToQueue(client.key, message);
    });
  };

  return RabbitMQClient;

})();

module.exports = {
  getClient: function(exchange, key) {
    return new RabbitMQClient(exchange, key);
  },
  RabbitMQClient: RabbitMQClient
};

//# sourceMappingURL=data:application/json;base64,