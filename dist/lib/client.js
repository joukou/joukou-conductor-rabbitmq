var Q, RabbitMQClient, amqplib, uuid;

amqplib = require('amqplib');

Q = require('q');

uuid = require('node-uuid');

RabbitMQClient = (function() {
  RabbitMQClient.prototype._channelDeferred = null;

  RabbitMQClient.prototype.connection = null;

  RabbitMQClient.prototype.channel = null;

  RabbitMQClient.prototype.key = null;

  RabbitMQClient.prototype.exchange = null;

  RabbitMQClient.prototype.consumer = null;

  RabbitMQClient.prototype.on = {
    connection: null,
    channel: null
  };

  function RabbitMQClient(exchange, key) {
    this.exchange = exchange;
    this.key = key;
    this._channelDeferred = Q.defer();
    this.on = {
      connection: amqplib.connect(exchange),
      channel: this._channelDeferred.promise
    };
    this._setupConnection();
  }

  RabbitMQClient.prototype._setupConnection = function() {
    return this.on.connection.then((function(_this) {
      return function() {
        return _this._onConnection.apply(_this, arguments);
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        _this._channelDeferred.reject(err);
      };
    })(this));
  };

  RabbitMQClient.prototype._onConnection = function(connection) {
    this.connection = connection;
    return this._setupChannel();
  };

  RabbitMQClient.prototype._setupChannel = function() {
    var ok;
    ok = this.connection.createChannel();
    return ok.then((function(_this) {
      return function() {
        _this._onChannel.apply(_this, arguments);
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        _this._channelDeferred.reject(err);
      };
    })(this));
  };

  RabbitMQClient.prototype._onChannel = function(channel) {
    this.channel = channel;
    return this._channelDeferred.resolve(this);
  };

  RabbitMQClient.prototype.cancel = function(consumerTag) {
    if (!this.channel) {
      return Q.reject(new Error("Not connected"));
    }
    return this.channel.cancel(consumerTag);
  };

  RabbitMQClient.prototype.consume = function(callback, contentOnly, consumerTag) {
    if (!(callback instanceof Function)) {
      throw new TypeError("Callback is expected to be a Function");
    }
    if (!consumerTag) {
      consumerTag = uuid.v4();
    }
    this.on.channel.then((function(_this) {
      return function() {
        _this.channel.assertQueue(_this.key);
        return _this.channel.consume(_this.key, function(message) {
          if (message === null || message === void 0) {
            return;
          }
          if (contentOnly) {
            message = message.content;
          }
          if (message === null || message === void 0) {
            return;
          }
          return callback(null, message);
        }, {
          consumerTag: consumerTag
        });
      };
    })(this)).fail(function(err) {
      callback(err, null);
    });
    return consumerTag;
  };

  RabbitMQClient.prototype.send = function(message) {
    var deferred;
    if (!Buffer.isBuffer(message)) {
      if (typeof message !== 'string') {
        message = JSON.stringify(message);
      }
      message = new Buffer(message);
    }
    deferred = Q.defer();
    this.on.channel.then((function(_this) {
      return function() {
        _this.channel.assertQueue(_this.key);
        deferred.resolve(_this.channel.sendToQueue(_this.key, message));
        return null;
      };
    })(this)).fail(deferred.reject);
    return deferred.promise;
  };

  return RabbitMQClient;

})();

module.exports = {
  getClient: function(exchange, key) {
    return new RabbitMQClient(exchange, key);
  },
  RabbitMQClient: RabbitMQClient
};

//# sourceMappingURL=data:application/json;base64,